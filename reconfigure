#!/usr/bin/python

import re
import os
import shutil
import subprocess
import filecmp
import sys

def is_multiuser():
    result = subprocess.run(["systemctl", "is-system-running"], capture_output=True, text=True)
    return result.stdout.strip() == "multi-user"

def get_script_directory():
    # Get the absolute path of the current Python script
    script_path = os.path.abspath(__file__)
    # Get the directory containing the script
    script_directory = os.path.dirname(script_path)
    return script_directory


def fix_default_config_file(configFile, defaultFile):
    # Initialize a flag to track if the configFile was removed
    removed = False

    # Check if the configFile exists and if it's empty or a directory
    if os.path.exists(configFile):
        if os.path.isfile(configFile) and os.path.getsize(configFile) == 0:
            # If it's an empty file, remove it
            os.remove(configFile)
            removed = True
        elif os.path.isdir(configFile) and not os.listdir(configFile):
            # If it's an empty directory, remove it recursively
            shutil.rmtree(configFile)
            removed = True
    else:
        removed = True
    
    # Check if the defaultFile exists and if configFile was removed
    if os.path.exists(defaultFile) and removed:
        # Copy the defaultFile to the configFile
        shutil.copy(defaultFile, configFile)
        print(f"File '{defaultFile}' copied to '{configFile}'")
    elif not os.path.exists(defaultFile):
        print(f"Source file '{defaultFile}' does not exist.")
        sys.exit(1)


def copy_if_different(source_file, destination_file):
    if not os.path.exists(destination_file) or not filecmp.cmp(source_file, destination_file):
        shutil.copy(source_file, destination_file)
        print(f"File '{source_file}' copied to '{destination_file}'")
        return True
    else:
        return False

# DBUS Configuration
if copy_if_different(get_script_directory()+"/dbus-lmsmpris.conf","/etc/dbus-1/system.d/lmsmpris.conf"):
    if is_multiuser():
        result = subprocess.run(["systemctl", "restart", "dbus"])
        if result.returncode != 0:
            print("Could not restart dbus")
            sys.exit(result.returncode)
    else:
        with open("/tmp/reboot", "a") as f:
            f.write("squeezelite dbus configuration")

# Server config file
configfile = "/etc/squeezelite.json"
default_configfile = get_script_directory()+"/squeezelite.json.conf"
fix_default_config_file(configfile, default_configfile)
